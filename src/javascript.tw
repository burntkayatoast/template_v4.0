:: StoryScript [script]
importStyles('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css');

// collapsible button
$(document).on(":passagedisplay", function () {
  console.log("Passage displayed!"); // Debugging line
  $('.collapsible').off('click').on('click', function () {
    console.log('Collapsible clicked!'); // Debugging line again bc this ain't working right
    $(this).toggleClass('active');
    var content = $(this).nextAll('.content').first(); // Find the next .content element
    if (content.length === 0) {
      console.error("No .content element found for this .collapsible button.");
      return;
    }
    if (content.css('max-height') === '0px' || content.css('max-height') === 'none') {
      console.log('Content scrollHeight:', content.prop('scrollHeight')); // Debugging line
      content.css('max-height', content.prop('scrollHeight') + 'px'); // Expand
    } else {
      content.css('max-height', '0px'); // Collapse
    }
  });
});

// reset passage to top
$(document).on(":passagedisplay", function() {
	$("#passages").scrollTop(0);
});

// Handy Dandy stuff ig
$(document).ready(function() {
	$("#saves").click(function() {
		UI.saves();
	});	
	$("#settings").click(function() {
		UI.settings();
	});
	$("#restart").click(function() {
		UI.restart();
	});	
    $("#back").click(function() {
        Engine.backward();
    });
    $("#mobile-back").click(function() {
        Engine.backward();
    });
});

// to avoid including passages tagged 'noreturn' when returning to game
$(document).on(':passagestart', function (ev) {
    if (!ev.passage.tags.includes('noreturn')) {
        State.variables.return = ev.passage.title;
    }
});

$(document).on(':dialogopen', function (ev) {
    if (ev.dialog === 'saves') {
        $('#ui-dialog-body > h3').remove(); // Remove the "In Browser" text
    }
});

// Autosave configuration
Config.saves.maxAutoSaves = 1; // Enable autosaving with one autosave slot
// Always allow autosaves unless the passage has the 'noreturn' tag
Config.saves.isAllowed = function (saveType) {
    if (saveType === Save.Type.Auto) {
        return !tags().includes('noreturn'); // Autosaves are allowed unless the passage has the 'noreturn' tag
    }
    return true; // Manual saves are always allowed
};

// Automatically generate save descriptions
Config.saves.descriptions = function (saveType) {
    const chapter = State.getVar("$chapter") || "Unknown Chapter"; // Default to "Unknown Chapter" if $chapter is not set
    const name = State.getVar("$name") || "Unnamed"; // Default to "Unnamed" if $name is not set

    // Format the save description as "Chapter - Name"
    return `${chapter} - ${name}`;
};

// force fullscreen portrait mode on mobile
function lock (orientation) {
  // Go into full screen first
  if (document.documentElement.requestFullscreen) {
    document.documentElement.requestFullscreen();
  } else if (document.documentElement.mozRequestFullScreen) {
    document.documentElement.mozRequestFullScreen();
  } else if (document.documentElement.webkitRequestFullscreen) {
    document.documentElement.webkitRequestFullscreen();
  } else if (document.documentElement.msRequestFullscreen) {
    document.documentElement.msRequestFullscreen();
  }

  // Then lock orientation
  screen.orientation.lock(orientation);
} 

/*--------- SETTINGS -------- */
// change font size 
var settingFontSize = ["17px", "18px", "19px", "20px", "21px", "22px"];
var resizeFont = function() {
    var size = document.getElementById('passages');
    var dialogBody = document.getElementById('ui-dialog-body'); // Select the dialog box body

    switch (settings.fontSize) { 
        case "17px":
            size.style.fontSize = "17px";
            if (dialogBody) dialogBody.style.fontSize = "17px";
            break;
        case "18px":
            size.style.fontSize = "18px";
            if (dialogBody) dialogBody.style.fontSize = "18px";
            break;
        case "19px":
            size.style.fontSize = "19px";
            if (dialogBody) dialogBody.style.fontSize = "19px";
            break;
        case "20px":
            size.style.fontSize = "20px";
            if (dialogBody) dialogBody.style.fontSize = "20px";
            break;
        case "21px":
            size.style.fontSize = "21px";
            if (dialogBody) dialogBody.style.fontSize = "21px";
            break;
        case "22px":
            size.style.fontSize = "22px";
            if (dialogBody) dialogBody.style.fontSize = "22px";
            break;
    }
};
Setting.addList("fontSize", {
	label		: "Change Font Size",
	list		: settingFontSize,
  default     : "17px",
	onInit		: resizeFont,
	onChange	: resizeFont
});

// change font family
var settingFontFamily = ["serif","sans-serif","open dyslexic"];
var fontFamily = function() {
	var $html = $("html");
		$html.removeClass("serif openDyslexic");
	switch (settings.fontFamily) {
		case "serif":
			$html.addClass("serif");
			break;
		case "open dyslexic":
			$html.addClass("openDyslexic");
			break;
	}
};
Setting.addList("fontFamily", {
	label		: "Change font style",
	list		: settingFontFamily,
	default		: "sans-serif",
	onInit		: fontFamily,
	onChange	: fontFamily
});


// change theme
var settingThemeNames = ["starlight", "moonlight", "sunlight"];
var settingThemeHandler = function () {
	var $html = $("html");
	$html.removeClass("dark sun");
	switch (settings.theme) {
	case "moonlight":
		$html.addClass("dark");
		break;
  case "sunlight":
		$html.addClass("sun");
		break;
	}
};
Setting.addList("theme", {
	label    : "Switch display mode",
	list     : settingThemeNames,
	default	 : "starlight",
	onInit   : settingThemeHandler,
	onChange : settingThemeHandler
});


// toggle content warning 
Setting.addToggle("content-warning", {
    label: "content warning",
    default: true
});


// notify.min.js, for SugarCube 2, by Chapel
// v1.1.1, 2024-07-22, 336675ff2cabe5f729a5f30d86aa409cc8432726
;!function(){var s=/\d+m?s$/;function a(s,a,e){"string"==typeof s&&("number"!=typeof a&&(a=!1),$(document).trigger({type:":notify",message:s,delay:a,class:e||""}))}$(document.body).append("<div id='notify'></div>"),$(document).on(":notify",(function(s){s.message&&"string"==typeof s.message&&(s.message.trim(),s.class?"string"==typeof s.class?s.class="open macro-notify "+s.class:Array.isArray(s.class)?s.class="open macro-notify "+s.class.join(" "):s.class="open macro-notify":s.class="open macro-notify",s.delay?("number"!=typeof s.delay&&(s.delay=Number(s.delay)),Number.isNaN(s.delay)&&(s.delay=2e3)):s.delay=2e3,$("#notify").empty().wiki(s.message).addClass(s.class),setTimeout((function(){$("#notify").removeClass()}),s.delay))})),Macro.add("notify",{tags:null,handler:function(){var e=this.payload[0].contents,t=!1,i=!1;if(this.args.length>0){var n=s.test(this.args[0]);"number"==typeof this.args[0]||n?(t=n?Util.fromCssTime(this.args[0]):this.args[0],i=this.args.length>1&&this.args.slice(1).flat(1/0)):i=this.args.flat(1/0).join(" ")}a(e,t,i)}}),setup.notify=a}();
// end notify.min.js

// dialog-api-macro-set.min.js, for SugarCube 2, by Chapel
// v1.3.0, 2024-07-22, 336675ff2cabe5f729a5f30d86aa409cc8432726
;Macro.add("dialog",{tags:["onopen","onclose"],handler:function(){var t="",s=null,o=null,n=this.args.length>0?this.args[0]:"",i=this.args.length>1?this.args.slice(1).flat(1/0):[];this.payload.forEach((function(n,i){0===i?t=n.contents:"onopen"===n.name?s=s?s+n.contents:n.contents:o=o?o+n.contents:n.contents})),i.push("macro-"+this.name),Dialog.setup(n,i.join(" ")),Dialog.wiki(t),s&&"string"==typeof s&&s.trim()&&$(document).one(":dialogopened",(function(){$.wiki(s)})),o&&"string"==typeof o&&o.trim()&&$(document).one(":dialogclosed",(function(){$.wiki(o)})),Dialog.open()}}),Macro.add("popup",{handler:function(){if(this.args.length<1)return this.error("need at least one argument; the passage to display");if(!Story.has(this.args[0]))return this.error("the passage "+this.args[0]+"does not exist");var t=this.args[0],s=this.args.length>1?this.args[1]:"",o=this.args.length>2?this.args.slice(2).flat(1/0):[];o.push("macro-"+this.name),Dialog.setup(s,o.join(" ")),Dialog.wiki(Story.get(t).processText()),Dialog.open()}}),Macro.add("dialogclose",{skipArgs:!0,handler:function(){Dialog.close()}});
// end dialog-api-macro-set.min.js